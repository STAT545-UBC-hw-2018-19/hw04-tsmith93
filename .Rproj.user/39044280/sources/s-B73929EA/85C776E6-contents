---
title: "hw02-tsmith93"
author: "Thomas Smith"
date: '2018-09-19'
output: github_document
---

##Initial exploration

If you haven't already done so, download both gapminder and tidyverse using `install.packages()` 

Next load gapminder and tidyverse:
```{r}
library(gapminder)
library(tidyverse)
```

What type of file is gapminder?
```{r}
#use class function
class(gapminder)
```
The function class (above) shows this is a tibble data frame, tibble, and a data frame

You can fin out the number of observations/rows and variable/collumns, respectively: 
```{r dimensions}
#dim is short for dimensions!
dim(gapminder)
```
This shows there are 6 collumns/variables and 1704 rows/observations

Alternatively, you can use individual functions to identify either number of rows:
```{r rows}
#n represents numbers
nrow(gapminder)
```

Or collumns:
```{r collumns}
ncol(gapminder)
```

You can also figure out what is the type of each variables individually:
```{r class}
#first call upon the dataframe, followed by the variable you want to investigate
class(gapminder$country)
```

Or for all of them!
```{r lapply class}
lapply(gapminder, class)
#lapply will call upon all the variables within the specified dataframe
```

You can also look at the range of variables, whether they be categorical:
```{r levels}
levels(gapminder$country)
#levels is used specifically for categorical variables
```

Or quantitative:
```{r range}
range(gapminder$lifeExp)
#range is used for quantitative variables
```

Here is a summary of the data, including distribution:
```{r summary}
summary(gapminder)
#summary will show the spread of the data. Specifically, it tells you the minumum and maximum values, the 1st and 3rd quartile, the median and the mean.
```
For all the categorical variables, such as country and continent, only the total number of observations are shown. For quantitative variables, the distribution of data is shown.


Specific summary statistics can also be shown, such as the mean of each variable:
```{r lapply mean}
lapply(gapminder, mean)
#Again, lapply allows you to look all variables with one command
```
No mean values are shown for the categorical variables as it is not possible!

##Visual representation

###Plotting two variables together

Next we can plot some of these variables. To start off, we will do a scatterplot of two variables. But before then, it is always good practice to make a grammar component table:

| Grammar Component     | Specification |
|-----------------------|---------------|
| __data__              | `gapminder` | 
| __aesthetic mapping__ | `x`and `y` |
| __geometric object__  | point |
| scale                 | linear  |
| statistical transform | none |
| coordinate system     | rectangular |
| facetting             | none |

```{r SP_popvslifeExp}
#Make things easy by assigning a standard plot to variable title "lvsp", meaning lifeExp vs. population
lvsp <- ggplot(gapminder, aes(x=pop, y=lifeExp)) 
#next add a geometric object so you can actually see the data ;)
lvsp + geom_point()
```
This plot shows how life expectancy increases with gdpPercap. Lets more clearly present this information with a trendline.

Using multiple functions, you can remove "distracting" elements in the plot.
```{r SP_popvslifeExp_clean}
lvsp + geom_point() + 
#remove the background grid and colour
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(),
#add axis lines        
  axis.line = element_line(colour = "black"))
```

Or you can more clearly present what the data is showing:

```{r SP_popvslifeExp_colour}
lvsp + geom_point() +
#this line adds a trendline with lm meaning linear model, se = FALSE removes standard error bars, aes makes the trendline for each continent a different colour  
  geom_smooth(method = "lm", se = FALSE, aes(colour = continent))
```
This shows that in Africa, life expectancy increases the most rapidly with gdp per capita compared to other continents.

###Plotting one variable

We can also present data for one quantitative variable using plots such as histograms:

| Grammar Component     | Specification |
|-----------------------|---------------|
| __data__              | `gapminder` |
| __aesthetic mapping__ |  `x` |
| __geometric object__  |  histogram|
| scale                 |  linear |
| statistical transform |  none |

```{r Hist_gdpPercap}
#First describe the data and aesthetic mapping
ggplot(gapminder, aes(gdpPercap)) +
#Next add the geometric object which is a histogram, and describe the width of the bins, in this case 30
    geom_histogram(bins = 30)
```

###Plotting categorical variables with quantitative variables

A popular choice for plotting the ttwo types of variables is with a boxplot:

| Grammar Component     | Specification |
|-----------------------|---------------|
| __data__              | `gapminder` |
| __aesthetic mapping__ |  `x` and `y`|
| __geometric object__  |  boxplot |
| scale                 |  log-y scale |
| statistical transform |  5-number summary |

```{r box_contvslifeExp}
a <- ggplot(gapminder, aes(continent, lifeExp)) +
#you can also add a log-y scale with this next function
  scale_y_log10()
#add a boxplot, and maybve even some colour!
a + geom_boxplot(aes(fill = continent))
```

##Sorting data

We can use functions such as select to specify the data we want to look at:
```{r select }
select(gapminder, country, year, lifeExp)
#first specify the dataframe, followed by all the variables you want to include
```

Alternatively, filter:
```{r filter}
filter(gapminder, lifeExp > 34)
#the dataframe, followed by a certain rule you would like to apply
```
Look! Only the rows where life expectancy above 30 is shown.

Another way is to use piping:
```{r pipe}
gapminder %>% 
  filter(lifeExp < 30)
```

Now, why don't we apply filters to `ggplot()`!

| Grammar Component     | Specification |
|-----------------------|---------------|
| __data__              | `gapminder` |
| __aesthetic mapping__ | `x and y |
| __geometric object__  |  line and point |
| scale                 |  linear |
| statistical transform |  none |

```{r lifeExpIndia}
gapminder %>% 
#pipe out a specific country  
 filter(country == "India") %>% 
#specify x and y variables
 ggplot(aes(year, lifeExp)) +
#add geometric objects
 geom_line() +
 geom_point()
```

Or we can even plot the same information for multiple countries at the same time:

```{r lifeExpallcountry}
#Specify the data and aesthetic mapping to a specific variable
c <- ggplot(gapminder, aes(year, lifeExp))
#Add a geometric shape
c + geom_line() +
#Add trendlines for country
  geom_line(aes(group=country), alpha=0.2)
```

##Extra

###Interesting dplyr functions

Arrange dataframe by descending order for a specific variable:

```{r descending example}
#Within the `desc()`, specify what variable you want to sort
arrange(gapminder, desc(lifeExp))
```
Looks like Japan had the highest overall average life expectancy in 2007!

###Evaluating someone elses data chunk

Lets evaluate this data line where the author was hoping to get data only from Afghanistan and Rwanda.

```{r review}
filter(gapminder, country == c("Rwanda", "Afghanistan"))
```

As only data from Afghanistan and Rwanda are shown, it appears they did so correctly!



